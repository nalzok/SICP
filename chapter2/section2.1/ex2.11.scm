;;; Exercise 2.11
;;; =============

(define (make-interval a b) (cons a b))
(define (upper-bound x) (max (car x) (cdr x)))
(define (lower-bound x) (min (car x) (cdr x)))

(define (mul-interval x y)
  (let ((x1 (lower-bound x))
        (x2 (upper-bound x))
        (y1 (lower-bound y))
        (y2 (upper-bound y)))
    (cond ((negative? x2)
           (cond ((negative? y2) (make-interval (* x2 y2)
                                                (* x1 y1)))
                 ((positive? y1) (make-interval (* x1 y2)
                                                (* x2 y1)))
                 (else (make-interval (* x1 y2)
                                      (* x1 y1)))))
          ((positive? x1)
           (cond ((negative? y2) (make-interval (* x2 y1)
                                                (* x1 y2)))
                 ((positive? y1) (make-interval (* x1 y1)
                                                (* x2 y2)))
                 (else (make-interval (* x2 y1)
                                      (* x2 y2)))))
          (else
            (cond ((negative? y2) (make-interval (* x2 y1)
                                                 (* x1 y1)))
                  ((positive? y1) (make-interval (* x1 y2)
                                                 (* x2 y2)))
                  (else (make-interval (min (* x1 y2)
                                            (* x2 y1))
                                       (max (* x1 y1)
                                            (* x2 y2)))))))))         
(define (print-interval x)
  (newline)
  (display "[")
  (display (lower-bound x))
  (display ",")
  (display (upper-bound x))
  (display "]"))

(define i1 (make-interval -2 1))
(define i2 (make-interval -1 2))
(define i (mul-interval i1 i2))
(print-interval i)
;[-4,2]

