;;; Exercise 2.65
;;; =============

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
      result-list
      (copy-to-list (left-branch tree)
                    (cons (entry tree)
                          (copy-to-list (right-branch tree)
                                        result-list)))))
  (copy-to-list tree '()))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elts n)
  (if (= n 0)
    (cons '() elts)
    (let ((left-size (quotient (- n 1) 2)))
     (let ((left-result (partial-tree elts left-size)))
      (let ((left-tree (car left-result))
            (non-left-elts (cdr left-result))
            (right-size (- n (+ left-size 1))))
        (let ((this-entry (car non-left-elts))
              (right-result (partial-tree (cdr non-left-elts)
                                          right-size)))
          (let ((right-tree (car right-result))
                (remaining-elts (cdr right-result)))
            (cons (make-tree this-entry left-tree right-tree)
                  remaining-elts))))))))

(define (union-set set1 set2)
  (let ((ol1 (tree->list set1))
        (ol2 (tree->list set2)))
    (list->tree (union-set-ol ol1 ol2))))
(define (union-set-ol ol1 ol2)
  (cond ((null? ol1) ol2)
        ((null? ol2) ol1)
        ((< (car ol1) (car ol2))
         (cons (car ol1) (union-set-ol (cdr ol1) ol2)))
        ((> (car ol1) (car ol2))
         (cons (car ol2) (union-set-ol ol1 (cdr ol2))))
        (else (cons (car ol1)
                    (union-set-ol (cdr ol1)
                                  (cdr ol2))))))

(define (intersection-set set1 set2)
  (let ((ol1 (tree->list set1))
        (ol2 (tree->list set2)))
    (list->tree (intersection-set-ol ol1 ol2))))
(define (intersection-set-ol ol1 ol2)
  (if (or (null? ol1) (null? ol2))
    '()
    (let ((x1 (car ol1)) (x2 (car ol2)))
     (cond ((< x1 x2)
            (intersection-set-ol (cdr ol1) ol2))
           ((> x1 x2)
            (intersection-set-ol ol1 (cdr ol2)))
           (else (cons x1
                       (intersection-set-ol (cdr ol1)
                                            (cdr ol2))))))))

(define set1 '(2 (1 () ()) (3 () ())))
(define set2 '(4 (2 () ()) (6 () ())))
(union-set set1 set2)
;Value 13: (3 (1 () (2 () ())) (4 () (6 () ())))
(intersection-set set1 set2)
;Value 14: (2 () ())

