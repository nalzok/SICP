;;; Exercise 2.57
;;; =============

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
           (make-product (multiplier exp)
                         (deriv (multiplicand exp) var))
           (make-product (deriv (multiplier exp) var)
                         (multiplicand exp))))
        (else
          (error "unknown expression type -- DERIV" exp))))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s)
  (define (augend-iter s)
    (if (null? s)
      0
      (make-sum (car s)
                (augend-iter (cdr s)))))
  (augend-iter (cddr s)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        ((and (sum? a1) (sum? a2))
         (append a1 (cdr a2)))
        ((sum? a1)
         (append a1 (list a2)))
        ((sum? a2)
         (append a2 (list a1)))
        (else (list '+ a1 a2))))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p)
  (define (multiplicand-iter p)
    (if (null? p)
      1
      (make-product (car p)
                    (multiplicand-iter (cdr p)))))
  (multiplicand-iter (cddr p)))
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2))
         (* m1 m2))
        ((and (product? m1) (product? m2))
         (append m1 (cdr m2)))
        ((product? m1)
         (append m1 (list m2)))
        ((product? m2)
         (append m2 (list m1)))
        (else (list '* m1 m2))))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(deriv '(* x y (+ x 3)) 'x)
;Value 13: (+ (* x y) (* y (+ x 3)))

